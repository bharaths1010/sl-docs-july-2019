######################
# Configuration Management
######################

Puppet  => 2005 (JVM Based)
Chef    => 2007 (Erlang)
Ansible => 2012 (was acquired by RedHat in 2015)

********************
Keywords
********************

- Configuration Management
- Configuration Drift
- Self-Healing
- Out-of-Band Changes
- Idempotence
- Infrastructure-as-Code
- Immutable Infrastructure
- DSC => Desired State Configuration
- DSL => Domain Specific Language
- Declarative vs Imperative
- Templates / Images
  - VMware    => Templates
  - AWS       => AMI (Amazon Machine Images)
  - Docker    => Images
  - Vagrant   => Box
  - OpenStack => Images
  - DigitalOcean  => Templates/Snapshots

Standard / Golden Templates

Why Configuration Management?
  - Not to have Configuration Drift in your environment
  - Self Healing
  - Revert "Out-of-Band" changes
  - Idempotence


**********************
Chef Resources:
https://manage.chef.io/login
Chef official Tutorials: https://learn.chef.io
Infrastructure Automation Track: https://learn.chef.io/tracks/infrastructure-automation#/
**********************

Agent Based => Chef and Puppet
Agent Less  => Ansible


***************
Chef recipe Example
***************

package "nginx" do
  action :install
end

user "sk12k" do
  action :create
end

service "nginx" do
  action :start
end

***************
Puppet Manifest Example
***************
node default {
package { 'tree':
  ensure    => 'installed',
}
user { 'sk12k':
  ensure    => 'present',
  password  => 'mysuperpassword',
}
file { '/tmp/puppet.txt':
  ensure => 'present',
  content=> "This file was create via Puppet"
}
}

## "=>" is called Hash-Rocket
***************
Ansible Playbook Example
***************

- name: install nginx
  apt:
    name: nginx
    state: present

*****************
Configuration Drift
*****************

Standard configuration:

.net 4.5
user x who has read permission on folder y
port 7676 closed


.Net => 5.0
user x has now r/w permission on folder y
port 7676 => open

*****************
Puppet Converge steps
*****************

=> puppet agent -t
=> agent sends facts to master (in the form of "Node Object")
=> Master compiles the catalogue
=> sends the catalogue back to agent
=> Agent converges the catalogue and sends back the report to the Master

===========================
Sample manifest file
===========================
node default {
  package { 'tree':
    ensure    => 'installed'
  }
  user { 'sk12k':
    ensure    => 'present',
    password  => '123456'
  }
  file { '/tmp/info.txt':
    ensure    => 'present',
    content   => "This file has been created by puppetserver\n"
  }
  service { 'nginx':
    ensure    => 'started'
  }
}

===========================
site.pp and init.pp
===========================

site.pp => Environment specific
init.pp => Module specific (in chef it is known as default.rb)

===========================
Modules and Classes
===========================

cd /etc/puppetlabs/code/environments/production
cd modules

##before we work with modules we need to install pdk (puppet development kit)

apt-get install pdk

##Once installed we can generate our new module using the following command:

pdk new module mynginx

##It will prompt us to a series a questions which we need to answer appropriately.
##Once all questions are answered it will create module successfully.

cd mynginx

##This is how the folder should look like:
.
└── mynginx
    ├── CHANGELOG.md
    ├── Gemfile
    ├── Gemfile.lock
    ├── README.md
    ├── Rakefile
    ├── appveyor.yml
    ├── data
    │   └── common.yaml
    ├── examples
    ├── files
    ├── hiera.yaml
    ├── manifests
    ├── metadata.json
    ├── spec
    │   ├── default_facts.yml
    │   └── spec_helper.rb
    ├── tasks
    └── templates

- data - stores all the information about your Heira configuration.
- files - there is where static files for nodes are stored
- manifests - folder where all manifest files (.pp) are kept
- spec - this one holds all the details about the plug-ins.
- tasks - provides ad hoc command capability in puppet
- templates - dynamic file creation on nodes based on some condition

###Writing a Manifest (inside a module)

pdk new class install
# this will create a new file called manifests/install.pp

vi manifests/install.pp

class nginx::install {
  package { 'install_nginx':
    name   => 'nginx',
    ensure => 'present',
  }
}

##Testing your puppet code

puppet parser validate manifests/install.pp

##If nothing is returned, we know the file is properly formatted.

pdk new class nginx
vi manifests/init.pp

class nginx {
  contain nginx::install
}

## Edit site.pp file for production environment.

vi /etc/puppetlabs/code/environments/production/manifests/site.pp

node default {
  include nginx::install
}

## We are all set from Puppet server side. Now go to Puppet Slave and run the following command:

puppet agent -t

##To confirm nginx installation, run the following command on Puppet Slave:

which nginx

Output:
/usr/sbin/nginx


==================
References
==================

https://docs.puppet.com/
https://www.puppetcookbook.com/
https://www.edureka.co/blog/what-is-puppet/
https://www.edureka.co/blog/chef-vs-puppet-vs-ansible-vs-saltstack/
http://fullstack-puppet-docs.readthedocs.io/en/latest/puppet_manifests.html
http://www.bogotobogo.com/DevOps/Puppet/puppet_basics_of_code_terminology.php


.
